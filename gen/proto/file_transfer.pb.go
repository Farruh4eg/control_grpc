// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/file_transfer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FSNode_NodeType int32

const (
	FSNode_FOLDER FSNode_NodeType = 0
	FSNode_FILE   FSNode_NodeType = 1
)

// Enum value maps for FSNode_NodeType.
var (
	FSNode_NodeType_name = map[int32]string{
		0: "FOLDER",
		1: "FILE",
	}
	FSNode_NodeType_value = map[string]int32{
		"FOLDER": 0,
		"FILE":   1,
	}
)

func (x FSNode_NodeType) Enum() *FSNode_NodeType {
	p := new(FSNode_NodeType)
	*p = x
	return p
}

func (x FSNode_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSNode_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_file_transfer_proto_enumTypes[0].Descriptor()
}

func (FSNode_NodeType) Type() protoreflect.EnumType {
	return &file_proto_file_transfer_proto_enumTypes[0]
}

func (x FSNode_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FSNode_NodeType.Descriptor instead.
func (FSNode_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{1, 0}
}

type FSRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path to list. Empty means list roots (drives/root dir).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FSRequest) Reset() {
	*x = FSRequest{}
	mi := &file_proto_file_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSRequest) ProtoMessage() {}

func (x *FSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSRequest.ProtoReflect.Descriptor instead.
func (*FSRequest) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *FSRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FSNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                    // Full path of the node
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                    // Name of the node (filename or folder name) - Added for clarity
	Type          FSNode_NodeType        `protobuf:"varint,2,opt,name=type,proto3,enum=control_grpc.FSNode_NodeType" json:"type,omitempty"` // Type of the node (FOLDER or FILE)
	HasChildren   bool                   `protobuf:"varint,3,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`  // Relevant for FOLDER type. True if directory is not empty.
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                   // File size in bytes. For folders, this might be 0 or an estimate.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FSNode) Reset() {
	*x = FSNode{}
	mi := &file_proto_file_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSNode) ProtoMessage() {}

func (x *FSNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSNode.ProtoReflect.Descriptor instead.
func (*FSNode) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *FSNode) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FSNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FSNode) GetType() FSNode_NodeType {
	if x != nil {
		return x.Type
	}
	return FSNode_FOLDER
}

func (x *FSNode) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

func (x *FSNode) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestedPath string                 `protobuf:"bytes,1,opt,name=requested_path,json=requestedPath,proto3" json:"requested_path,omitempty"` // Echo back the path this response is for
	Nodes         []*FSNode              `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                                      // List of nodes found at the path
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`    // For reporting errors like "Access Denied"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FSResponse) Reset() {
	*x = FSResponse{}
	mi := &file_proto_file_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSResponse) ProtoMessage() {}

func (x *FSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSResponse.ProtoReflect.Descriptor instead.
func (*FSResponse) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *FSResponse) GetRequestedPath() string {
	if x != nil {
		return x.RequestedPath
	}
	return ""
}

func (x *FSResponse) GetNodes() []*FSNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FSResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the file or folder to download
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_proto_file_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *FileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// New message for metadata, sent potentially with the first chunk
type FileChunkMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalSize     int64                  `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"` // Total size of the file being transferred.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunkMetadata) Reset() {
	*x = FileChunkMetadata{}
	mi := &file_proto_file_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunkMetadata) ProtoMessage() {}

func (x *FileChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunkMetadata.ProtoReflect.Descriptor instead.
func (*FileChunkMetadata) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *FileChunkMetadata) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type FileChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Sent by server in the first chunk if total_size is known and differs
	// from FSNode.size or if FSNode.size was an estimate (e.g. for zipped folders).
	Metadata      *FileChunkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Content       []byte             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // Chunk of file or zip data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_proto_file_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_file_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_proto_file_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *FileChunk) GetMetadata() *FileChunkMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_proto_file_transfer_proto protoreflect.FileDescriptor

const file_proto_file_transfer_proto_rawDesc = "" +
	"\n" +
	"\x19proto/file_transfer.proto\x12\fcontrol_grpc\"\x1f\n" +
	"\tFSRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\xbc\x01\n" +
	"\x06FSNode\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x121\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1d.control_grpc.FSNode.NodeTypeR\x04type\x12!\n" +
	"\fhas_children\x18\x03 \x01(\bR\vhasChildren\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\" \n" +
	"\bNodeType\x12\n" +
	"\n" +
	"\x06FOLDER\x10\x00\x12\b\n" +
	"\x04FILE\x10\x01\"\x84\x01\n" +
	"\n" +
	"FSResponse\x12%\n" +
	"\x0erequested_path\x18\x01 \x01(\tR\rrequestedPath\x12*\n" +
	"\x05nodes\x18\x02 \x03(\v2\x14.control_grpc.FSNodeR\x05nodes\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"!\n" +
	"\vFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"2\n" +
	"\x11FileChunkMetadata\x12\x1d\n" +
	"\n" +
	"total_size\x18\x01 \x01(\x03R\ttotalSize\"b\n" +
	"\tFileChunk\x12;\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1f.control_grpc.FileChunkMetadataR\bmetadata\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent2\xe4\x01\n" +
	"\x13FileTransferService\x12:\n" +
	"\x05GetFS\x12\x17.control_grpc.FSRequest\x1a\x18.control_grpc.FSResponse\x12D\n" +
	"\fDownloadFile\x12\x19.control_grpc.FileRequest\x1a\x17.control_grpc.FileChunk0\x01\x12K\n" +
	"\x13DownloadFolderAsZip\x12\x19.control_grpc.FileRequest\x1a\x17.control_grpc.FileChunk0\x01B\x18Z\x16control_grpc/gen/protob\x06proto3"

var (
	file_proto_file_transfer_proto_rawDescOnce sync.Once
	file_proto_file_transfer_proto_rawDescData []byte
)

func file_proto_file_transfer_proto_rawDescGZIP() []byte {
	file_proto_file_transfer_proto_rawDescOnce.Do(func() {
		file_proto_file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_file_transfer_proto_rawDesc), len(file_proto_file_transfer_proto_rawDesc)))
	})
	return file_proto_file_transfer_proto_rawDescData
}

var file_proto_file_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_file_transfer_proto_goTypes = []any{
	(FSNode_NodeType)(0),      // 0: control_grpc.FSNode.NodeType
	(*FSRequest)(nil),         // 1: control_grpc.FSRequest
	(*FSNode)(nil),            // 2: control_grpc.FSNode
	(*FSResponse)(nil),        // 3: control_grpc.FSResponse
	(*FileRequest)(nil),       // 4: control_grpc.FileRequest
	(*FileChunkMetadata)(nil), // 5: control_grpc.FileChunkMetadata
	(*FileChunk)(nil),         // 6: control_grpc.FileChunk
}
var file_proto_file_transfer_proto_depIdxs = []int32{
	0, // 0: control_grpc.FSNode.type:type_name -> control_grpc.FSNode.NodeType
	2, // 1: control_grpc.FSResponse.nodes:type_name -> control_grpc.FSNode
	5, // 2: control_grpc.FileChunk.metadata:type_name -> control_grpc.FileChunkMetadata
	1, // 3: control_grpc.FileTransferService.GetFS:input_type -> control_grpc.FSRequest
	4, // 4: control_grpc.FileTransferService.DownloadFile:input_type -> control_grpc.FileRequest
	4, // 5: control_grpc.FileTransferService.DownloadFolderAsZip:input_type -> control_grpc.FileRequest
	3, // 6: control_grpc.FileTransferService.GetFS:output_type -> control_grpc.FSResponse
	6, // 7: control_grpc.FileTransferService.DownloadFile:output_type -> control_grpc.FileChunk
	6, // 8: control_grpc.FileTransferService.DownloadFolderAsZip:output_type -> control_grpc.FileChunk
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_file_transfer_proto_init() }
func file_proto_file_transfer_proto_init() {
	if File_proto_file_transfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_file_transfer_proto_rawDesc), len(file_proto_file_transfer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_file_transfer_proto_goTypes,
		DependencyIndexes: file_proto_file_transfer_proto_depIdxs,
		EnumInfos:         file_proto_file_transfer_proto_enumTypes,
		MessageInfos:      file_proto_file_transfer_proto_msgTypes,
	}.Build()
	File_proto_file_transfer_proto = out.File
	file_proto_file_transfer_proto_goTypes = nil
	file_proto_file_transfer_proto_depIdxs = nil
}
