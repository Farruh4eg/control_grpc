// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/remote_control.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemoteControlService_GetFeed_FullMethodName = "/control_grpc.RemoteControlService/GetFeed"
)

// RemoteControlServiceClient is the client API for RemoteControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteControlServiceClient interface {
	GetFeed(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FeedRequest, FeedResponse], error)
}

type remoteControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteControlServiceClient(cc grpc.ClientConnInterface) RemoteControlServiceClient {
	return &remoteControlServiceClient{cc}
}

func (c *remoteControlServiceClient) GetFeed(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FeedRequest, FeedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteControlService_ServiceDesc.Streams[0], RemoteControlService_GetFeed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FeedRequest, FeedResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteControlService_GetFeedClient = grpc.BidiStreamingClient[FeedRequest, FeedResponse]

// RemoteControlServiceServer is the server API for RemoteControlService service.
// All implementations should embed UnimplementedRemoteControlServiceServer
// for forward compatibility.
type RemoteControlServiceServer interface {
	GetFeed(grpc.BidiStreamingServer[FeedRequest, FeedResponse]) error
}

// UnimplementedRemoteControlServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteControlServiceServer struct{}

func (UnimplementedRemoteControlServiceServer) GetFeed(grpc.BidiStreamingServer[FeedRequest, FeedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedRemoteControlServiceServer) testEmbeddedByValue() {}

// UnsafeRemoteControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteControlServiceServer will
// result in compilation errors.
type UnsafeRemoteControlServiceServer interface {
	mustEmbedUnimplementedRemoteControlServiceServer()
}

func RegisterRemoteControlServiceServer(s grpc.ServiceRegistrar, srv RemoteControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedRemoteControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteControlService_ServiceDesc, srv)
}

func _RemoteControlService_GetFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteControlServiceServer).GetFeed(&grpc.GenericServerStream[FeedRequest, FeedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteControlService_GetFeedServer = grpc.BidiStreamingServer[FeedRequest, FeedResponse]

// RemoteControlService_ServiceDesc is the grpc.ServiceDesc for RemoteControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_grpc.RemoteControlService",
	HandlerType: (*RemoteControlServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFeed",
			Handler:       _RemoteControlService_GetFeed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/remote_control.proto",
}
