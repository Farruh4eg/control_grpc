syntax = "proto3";

package control_grpc;

option go_package = "control_grpc/gen/proto";

service FileTransferService {
  // Request content for a specific path. Empty path means roots.
  rpc GetFS(FSRequest) returns (FSResponse);

  // Download a file from the server.
  rpc DownloadFile(FileRequest) returns (stream FileChunk);

  // Download a folder from the server as a zip archive.
  rpc DownloadFolderAsZip(FileRequest) returns (stream FileChunk);
}

message FSRequest {
  string path = 1; // Path to list. Empty means list roots (drives/root dir).
}

message FSNode {
  enum NodeType {
    FOLDER = 0;
    FILE = 1;
  }
  string path = 1;        // Full path of the node
  string name = 5;        // Name of the node (filename or folder name) - Added for clarity
  NodeType type = 2;      // Type of the node (FOLDER or FILE)
  bool has_children = 3;  // Relevant for FOLDER type. True if directory is not empty.
  int64 size = 4;         // File size in bytes. For folders, this might be 0 or an estimate.
  // Consider adding modtime etc. later if needed
  // int64 modified_time = 6; // e.g., Unix timestamp
}

message FSResponse {
  string requested_path = 1; // Echo back the path this response is for
  repeated FSNode nodes = 2; // List of nodes found at the path
  string error_message = 3;  // For reporting errors like "Access Denied"
}

message FileRequest {
  string path = 1; // Path of the file or folder to download
}

// New message for metadata, sent potentially with the first chunk
message FileChunkMetadata {
  int64 total_size = 1; // Total size of the file being transferred.
  // string file_name = 2; // Optional: if the name differs or for confirmation
}

message FileChunk {
  // Optional: Sent by server in the first chunk if total_size is known and differs
  // from FSNode.size or if FSNode.size was an estimate (e.g. for zipped folders).
  FileChunkMetadata metadata = 1;
  bytes content = 2; // Chunk of file or zip data
}
